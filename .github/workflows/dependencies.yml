name: 🔄 Dependencies Update

on:
  schedule:
    # 매주 월요일 UTC 1시 (한국시간 10시)에 실행
    - cron: '0 1 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Update type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  PYTHON_VERSION: "3.11"
  
jobs:
  # ==============================================================================
  # 1. 보안 취약점 스캔
  # ==============================================================================
  security-scan:
    name: 🛡️ Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    outputs:
      vulnerabilities-found: ${{ steps.audit.outputs.vulnerabilities }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        
    - name: 🛡️ Run security audit
      id: audit
      run: |
        # Safety 스캔
        echo "🛡️ Running Safety scan..."
        safety check --json > safety-report.json || true
        
        # pip-audit 스캔
        echo "🛡️ Running pip-audit scan..."
        pip-audit --format=json --output=pip-audit-report.json || true
        
        # 취약점 발견 여부 확인
        if [ -s safety-report.json ] || [ -s pip-audit-report.json ]; then
          echo "vulnerabilities=true" >> $GITHUB_OUTPUT
          echo "🚨 Security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        else
          echo "vulnerabilities=false" >> $GITHUB_OUTPUT
          echo "✅ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          pip-audit-report.json

  # ==============================================================================
  # 2. 의존성 업데이트 확인
  # ==============================================================================
  check-updates:
    name: 🔍 Check Available Updates
    runs-on: ubuntu-latest
    
    outputs:
      updates-available: ${{ steps.check.outputs.available }}
      update-summary: ${{ steps.check.outputs.summary }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        
    - name: 🔍 Check for updates
      id: check
      run: |
        echo "🔍 Checking for dependency updates..."
        
        # 각 requirements 파일별 업데이트 확인
        update_count=0
        update_summary=""
        
        for req_file in requirements/*.txt; do
          if [ "$req_file" != "requirements/base.txt" ]; then
            echo "Checking $req_file..."
            
            # pip-tools를 사용해 업데이트 가능한 패키지 확인
            pip-compile --upgrade --dry-run "$req_file" > "${req_file}.new" || true
            
            if ! diff -q "$req_file" "${req_file}.new" >/dev/null 2>&1; then
              update_count=$((update_count + 1))
              update_summary="$update_summary\n- Updates available in $req_file"
            fi
            
            rm -f "${req_file}.new"
          fi
        done
        
        if [ $update_count -gt 0 ]; then
          echo "available=true" >> $GITHUB_OUTPUT
          echo "summary=$update_summary" >> $GITHUB_OUTPUT
          echo "📦 $update_count requirement files have updates available" >> $GITHUB_STEP_SUMMARY
        else
          echo "available=false" >> $GITHUB_OUTPUT
          echo "summary=No updates available" >> $GITHUB_OUTPUT
          echo "✅ All dependencies are up to date" >> $GITHUB_STEP_SUMMARY
        fi

  # ==============================================================================
  # 3. 의존성 업데이트 적용
  # ==============================================================================
  update-dependencies:
    name: 📦 Update Dependencies
    runs-on: ubuntu-latest
    needs: [security-scan, check-updates]
    if: needs.check-updates.outputs.updates-available == 'true' || needs.security-scan.outputs.vulnerabilities-found == 'true'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        
    - name: 🔄 Update base dependencies
      run: |
        echo "🔄 Updating base dependencies..."
        
        # Update type에 따른 업데이트 전략
        UPDATE_TYPE="${{ github.event.inputs.update_type || 'patch' }}"
        
        case $UPDATE_TYPE in
          "patch")
            # 패치 버전만 업데이트 (보안 수정 포함)
            pip-compile --upgrade requirements/base.txt
            ;;
          "minor")
            # 마이너 버전까지 업데이트
            pip-compile --upgrade requirements/base.txt
            ;;
          "major")
            # 메이저 버전까지 업데이트 (주의 필요)
            pip-compile --upgrade requirements/base.txt
            ;;
        esac
        
    - name: 🔄 Update service-specific dependencies
      run: |
        echo "🔄 Updating service-specific dependencies..."
        
        # Airflow constraints 적용하여 업데이트
        AIRFLOW_VERSION=2.10.5
        PYTHON_VERSION="3.11"
        CONSTRAINT_URL="https://raw.githubusercontent.com/apache/airflow/constraints-${AIRFLOW_VERSION}/constraints-${PYTHON_VERSION}.txt"
        
        # Airflow 의존성 업데이트 (constraints 적용)
        pip-compile --upgrade --constraint "$CONSTRAINT_URL" requirements/airflow.txt
        
        # 다른 서비스 의존성 업데이트
        for req_file in requirements/api.txt requirements/pytorch.txt requirements/mlflow.txt requirements/feast.txt; do
          pip-compile --upgrade "$req_file"
        done
        
    - name: 🧪 Test updated dependencies
      run: |
        echo "🧪 Testing updated dependencies..."
        
        # 기본 의존성 설치 및 테스트
        pip install -r requirements/base.txt
        python -c "import numpy, pandas, sklearn; print('✅ Core packages working')"
        
        # 호환성 검사
        pip check || echo "⚠️ Some dependency conflicts detected"
        
    - name: 📝 Generate update report
      run: |
        echo "📝 Generating dependency update report..."
        
        # Git diff로 변경사항 확인
        git diff --name-only requirements/ > changed_files.txt
        
        if [ -s changed_files.txt ]; then
          echo "## 📦 Dependency Updates" > update-report.md
          echo "" >> update-report.md
          echo "### 🔄 Updated Files" >> update-report.md
          echo "" >> update-report.md
          
          while read -r file; do
            echo "- \`$file\`" >> update-report.md
          done < changed_files.txt
          
          echo "" >> update-report.md
          echo "### 📊 Detailed Changes" >> update-report.md
          echo "" >> update-report.md
          echo "\`\`\`diff" >> update-report.md
          git diff requirements/ >> update-report.md
          echo "\`\`\`" >> update-report.md
        fi
        
    - name: 📤 Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          📦 Update dependencies (${{ github.event.inputs.update_type || 'patch' }})
          
          - Update type: ${{ github.event.inputs.update_type || 'patch' }}
          - Security vulnerabilities: ${{ needs.security-scan.outputs.vulnerabilities-found }}
          - Updated packages: See diff for details
        title: "📦 Automated dependency updates (${{ github.event.inputs.update_type || 'patch' }})"
        body-path: update-report.md
        branch: feature/dependency-updates-${{ github.run_number }}
        delete-branch: true
        labels: |
          dependencies
          automated-pr
          ${{ github.event.inputs.update_type || 'patch' }}-update

  # ==============================================================================
  # 4. 의존성 업데이트 테스트
  # ==============================================================================
  test-updates:
    name: 🧪 Test Dependency Updates
    runs-on: ubuntu-latest
    needs: update-dependencies
    if: needs.update-dependencies.result == 'success'
    
    strategy:
      matrix:
        service: [api, pytorch, mlflow, airflow]
        
    steps:
    - name: 📥 Checkout updated code
      uses: actions/checkout@v4
      with:
        ref: feature/dependency-updates-${{ github.run_number }}
        
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install updated dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/base.txt
        pip install -r requirements/${{ matrix.service }}.txt
        
    - name: 🧪 Run compatibility tests
      run: |
        echo "🧪 Testing ${{ matrix.service }} compatibility..."
        
        # 기본 import 테스트
        case ${{ matrix.service }} in
          "api")
            python -c "import fastapi, uvicorn, pydantic; print('✅ FastAPI stack working')"
            ;;
          "pytorch")
            python -c "import torch, torchvision; print('✅ PyTorch stack working')"
            ;;
          "mlflow")
            python -c "import mlflow; print('✅ MLflow working')"
            ;;
          "airflow")
            python -c "import airflow; print('✅ Airflow working')"
            ;;
        esac
        
    - name: 🐳 Test Docker build
      run: |
        echo "🐳 Testing Docker build for ${{ matrix.service }}..."
        docker build -f docker/dockerfiles/Dockerfile.${{ matrix.service }} -t test-${{ matrix.service }} . || true

  # ==============================================================================
  # 5. 보고서 생성
  # ==============================================================================
  dependency-report:
    name: 📋 Dependency Update Report
    runs-on: ubuntu-latest
    needs: [security-scan, check-updates, update-dependencies, test-updates]
    if: always()
    
    steps:
    - name: 📋 Generate final report
      run: |
        echo "## 📦 Dependency Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ **Security Scan**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "  - Vulnerabilities: ${{ needs.security-scan.outputs.vulnerabilities-found }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Security Scan**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.check-updates.result }}" == "success" ]; then
          echo "✅ **Update Check**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "  - Updates Available: ${{ needs.check-updates.outputs.updates-available }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Update Check**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.update-dependencies.result }}" == "success" ]; then
          echo "✅ **Dependencies Updated**: PR created" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.update-dependencies.result }}" == "skipped" ]; then
          echo "⏭️ **Dependencies Updated**: Skipped (no updates needed)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Dependencies Updated**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test-updates.result }}" == "success" ]; then
          echo "✅ **Update Testing**: All tests passed" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.test-updates.result }}" == "skipped" ]; then
          echo "⏭️ **Update Testing**: Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Update Testing**: Some tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📈 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Review and merge the dependency update PR if created" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor for any issues after merging" >> $GITHUB_STEP_SUMMARY
        echo "- Check security reports for critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
