name: 🚀 CD - Build & Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

env:
  PYTHON_VERSION: "3.11"
  DOCKER_REGISTRY: ghcr.io
  
jobs:
  # ==============================================================================
  # 1. 빌드 및 배포 준비
  # ==============================================================================
  build-and-push:
    name: 🏗️ Build & Push Docker Images
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        service: [api, jupyter, airflow, mlflow, pytorch, feast]
        
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/movie-mlops-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗️ Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/dockerfiles/Dockerfile.${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: 📋 Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom-${{ matrix.service }}.spdx.json
        
    - name: 🛡️ Scan image for vulnerabilities
      uses: anchore/scan-action@v3
      id: scan
      with:
        image: ${{ steps.meta.outputs.tags }}
        fail-build: false
        
    - name: 📊 Upload SBOM and scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-artifacts-${{ matrix.service }}
        path: |
          sbom-${{ matrix.service }}.spdx.json
          ${{ steps.scan.outputs.sarif }}

  # ==============================================================================
  # 2. Docker Compose 업데이트
  # ==============================================================================
  update-docker-compose:
    name: 📝 Update Docker Compose
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🔄 Update image tags in docker-compose files
      run: |
        # SHA 기반 태그 생성
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        IMAGE_TAG="main-${SHORT_SHA}"
        
        # 모든 docker-compose 파일에서 image 태그 업데이트
        for service in api jupyter airflow mlflow pytorch feast; do
          for compose_file in docker/docker-compose.*.yml; do
            if grep -q "movie-mlops/$service" "$compose_file"; then
              sed -i "s|movie-mlops/$service:.*|movie-mlops/$service:$IMAGE_TAG|g" "$compose_file"
            fi
          done
        done
        
    - name: 📤 Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add docker/docker-compose.*.yml
          git commit -m "🚀 Update Docker images to ${{ github.sha }}"
          git push
        fi

  # ==============================================================================
  # 3. 배포 (개발 환경)
  # ==============================================================================
  deploy-development:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-push, update-docker-compose]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'development'
    
    environment: development
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔄 Pull latest changes
      run: git pull origin main
      
    - name: 🐳 Deploy with Docker Compose
      run: |
        # 환경 변수 설정
        cp .env.template .env
        
        # 개발 환경 설정 적용
        echo "ENVIRONMENT=development" >> .env
        echo "DEBUG=true" >> .env
        
        # 기본 서비스 배포 (API + Database)
        docker compose -f docker/docker-compose.postgres.yml up -d
        docker compose -f docker/docker-compose.redis.yml up -d
        docker compose -f docker/docker-compose.api.yml up -d
        
        # 헬스 체크
        sleep 30
        curl -f http://localhost:8000/health || exit 1
        
    - name: 📊 Deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Development" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **API Endpoint**: http://localhost:8000" >> $GITHUB_STEP_SUMMARY
        echo "- **API Health**: ✅ Healthy" >> $GITHUB_STEP_SUMMARY

  # ==============================================================================
  # 4. 릴리스 노트 생성 (태그 푸시 시)
  # ==============================================================================
  create-release:
    name: 📋 Create Release
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📋 Generate release notes
      run: |
        # 이전 태그 찾기
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
        
        # 커밋 메시지 기반 릴리스 노트 생성
        echo "## 🎉 Release ${{ github.ref_name }}" > release-notes.md
        echo "" >> release-notes.md
        echo "### 🔄 Changes since $PREVIOUS_TAG" >> release-notes.md
        echo "" >> release-notes.md
        
        git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" >> release-notes.md
        
        echo "" >> release-notes.md
        echo "" >> release-notes.md
        echo "### 🐳 Docker Images" >> release-notes.md
        echo "" >> release-notes.md
        echo "All images are available at:" >> release-notes.md
        echo "- \`${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/movie-mlops-api:${{ github.ref_name }}\`" >> release-notes.md
        echo "- \`${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/movie-mlops-airflow:${{ github.ref_name }}\`" >> release-notes.md
        echo "- \`${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/movie-mlops-mlflow:${{ github.ref_name }}\`" >> release-notes.md
        echo "- \`${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/movie-mlops-pytorch:${{ github.ref_name }}\`" >> release-notes.md
        echo "- \`${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/movie-mlops-feast:${{ github.ref_name }}\`" >> release-notes.md
        echo "- \`${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/movie-mlops-jupyter:${{ github.ref_name }}\`" >> release-notes.md
        
    - name: 🏷️ Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        generate_release_notes: true
        
  # ==============================================================================
  # 5. 알림 (Slack, Discord 등)
  # ==============================================================================
  notify:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-development, create-release]
    if: always()
    
    steps:
    - name: 📢 Deployment notification
      run: |
        echo "## 📢 Deployment Notification" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy-development.result }}" == "success" ]; then
          echo "✅ **Development deployment**: Successful" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Development deployment**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.create-release.result }}" == "success" ]; then
          echo "✅ **Release creation**: Successful" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.create-release.result }}" == "skipped" ]; then
          echo "⏭️ **Release creation**: Skipped (not a tag)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Release creation**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
