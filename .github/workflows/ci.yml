name: 🧪 CI - Code Quality & Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  
jobs:
  # ==============================================================================
  # 1. 코드 품질 검사
  # ==============================================================================
  code-quality:
    name: 🔍 Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        
    - name: 🎨 Check code formatting (Black)
      run: |
        black --check --diff .
        
    - name: 📏 Check import sorting (isort)
      run: |
        isort --check-only --diff .
        
    - name: 🔍 Lint code (flake8)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: 🔒 Type checking (mypy)
      run: |
        mypy src/ --ignore-missing-imports || true
        
    - name: 🛡️ Security scan (bandit)
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: 📊 Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # ==============================================================================
  # 2. 단위 테스트
  # ==============================================================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/base.txt
        pip install -r requirements/dev.txt
        
    - name: 🧪 Run unit tests
      run: |
        pytest tests/unit/ -v --tb=short --cov=src --cov-report=xml --cov-report=html
        
    - name: 📊 Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report
        path: |
          coverage.xml
          htmlcov/
          
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ==============================================================================
  # 3. 통합 테스트 (Docker 필요한 경우)
  # ==============================================================================
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/base.txt
        pip install -r requirements/dev.txt
        pip install -r requirements/postgres.txt
        pip install -r requirements/redis.txt
        
    - name: 🔧 Setup test environment
      run: |
        cp .env.template .env
        echo "POSTGRES_HOST=localhost" >> .env
        echo "REDIS_HOST=localhost" >> .env
        
    - name: 🧪 Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short
        
  # ==============================================================================
  # 4. Docker 빌드 테스트
  # ==============================================================================
  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        service: [api, jupyter, airflow, mlflow, pytorch]
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/dockerfiles/Dockerfile.${{ matrix.service }}
        push: false
        tags: movie-mlops/${{ matrix.service }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  # ==============================================================================
  # 5. 종합 보고서
  # ==============================================================================
  report:
    name: 📊 Test Report
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, docker-build]
    if: always()
    
    steps:
    - name: 📥 Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: 📊 Generate summary report
      run: |
        echo "## 🧪 CI Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.code-quality.result }}" == "success" ]; then
          echo "✅ **Code Quality**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Code Quality**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.unit-tests.result }}" == "success" ]; then
          echo "✅ **Unit Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Unit Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "✅ **Integration Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Integration Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.docker-build.result }}" == "success" ]; then
          echo "✅ **Docker Build**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Docker Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Artifacts**: Check the artifacts section for detailed reports" >> $GITHUB_STEP_SUMMARY
