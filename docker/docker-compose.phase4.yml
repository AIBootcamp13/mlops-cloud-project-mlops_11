version: '3.8'

services:
  # Phase 4: 모니터링 + 이벤트 드리븐 통합 스택
  
  # Prometheus - 메트릭 수집
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: movie-mlops-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - movie-mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - 대시보드 및 시각화
  grafana:
    image: grafana/grafana:10.0.0
    container_name: movie-mlops-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - movie-mlops-network
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper - Kafka 의존성
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: movie-mlops-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - movie-mlops-network
    restart: unless-stopped

  # Kafka - 이벤트 스트리밍
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: movie-mlops-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - movie-mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI - Kafka 관리 인터페이스
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: movie-mlops-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: movie-mlops-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - movie-mlops-network
    restart: unless-stopped

  # Node Exporter - 시스템 메트릭
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: movie-mlops-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - movie-mlops-network
    restart: unless-stopped

  # cAdvisor - 컨테이너 메트릭
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: movie-mlops-cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - movie-mlops-network
    restart: unless-stopped

  # AlertManager - 알림 관리 (선택사항)
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: movie-mlops-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./configs/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - movie-mlops-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Phase 1-3 서비스들과 통합
  # PostgreSQL - 메인 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: movie-mlops-postgres
    environment:
      POSTGRES_DB: movie_mlops
      POSTGRES_USER: mlops_user
      POSTGRES_PASSWORD: mlops_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - movie-mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlops_user -d movie_mlops"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - 캐시 및 세션 스토어
  redis:
    image: redis:7-alpine
    container_name: movie-mlops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - movie-mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MLflow - 머신러닝 실험 추적
  mlflow:
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.mlflow
    container_name: movie-mlops-mlflow
    ports:
      - "5000:5000"
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://mlops_user:mlops_password@postgres:5432/movie_mlops
      MLFLOW_DEFAULT_ARTIFACT_ROOT: /opt/mlflow/artifacts
    volumes:
      - mlflow_artifacts:/opt/mlflow/artifacts
      - ./src:/opt/mlflow/src
    networks:
      - movie-mlops-network
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Feast - 피처 스토어
  feast:
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.feast
    container_name: movie-mlops-feast
    ports:
      - "6567:6567"
    environment:
      FEAST_REDIS_HOST: redis
      FEAST_REDIS_PORT: 6379
      FEAST_POSTGRES_HOST: postgres
      FEAST_POSTGRES_PORT: 5432
      FEAST_POSTGRES_DATABASE: movie_mlops
      FEAST_POSTGRES_USER: mlops_user
      FEAST_POSTGRES_PASSWORD: mlops_password
    volumes:
      - ./feast_repo:/opt/feast
      - ./data:/opt/data
    networks:
      - movie-mlops-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6567/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI - 메인 API 서버 (Phase 4 모니터링 포함)
  api:
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.api
    container_name: movie-mlops-api
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://mlops_user:mlops_password@postgres:5432/movie_mlops
      REDIS_URL: redis://redis:6379/0
      MLFLOW_TRACKING_URI: http://mlflow:5000
      FEAST_REPO_PATH: /opt/feast
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      PROMETHEUS_MULTIPROC_DIR: /tmp/prometheus_multiproc
    volumes:
      - ./src:/app/src
      - ./feast_repo:/opt/feast
      - ./data:/app/data
      - api_logs:/app/logs
    networks:
      - movie-mlops-network
    depends_on:
      - postgres
      - redis
      - mlflow
      - feast
      - kafka
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Airflow 서비스들
  airflow-webserver:
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.airflow
    container_name: movie-mlops-airflow-webserver
    command: webserver
    ports:
      - "8082:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql://mlops_user:mlops_password@postgres:5432/movie_mlops
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./data:/opt/airflow/data
      - airflow_logs:/opt/airflow/logs
    networks:
      - movie-mlops-network
    depends_on:
      - postgres
      - kafka
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  airflow-scheduler:
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.airflow
    container_name: movie-mlops-airflow-scheduler
    command: scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql://mlops_user:mlops_password@postgres:5432/movie_mlops
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./data:/opt/airflow/data
      - airflow_logs:/opt/airflow/logs
    networks:
      - movie-mlops-network
    depends_on:
      - postgres
      - kafka
    restart: unless-stopped

  # Jupyter - 개발 및 실험 환경
  jupyter:
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.jupyter
    container_name: movie-mlops-jupyter
    ports:
      - "8888:8888"
    environment:
      JUPYTER_ENABLE_LAB: 'yes'
      JUPYTER_TOKEN: 'movie-mlops-token'
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./src:/home/jovyan/work/src
      - ./data:/home/jovyan/work/data
    networks:
      - movie-mlops-network
    restart: unless-stopped

volumes:
  # 모니터링 데이터
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  
  # Kafka 데이터
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  
  # 기존 서비스 데이터
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mlflow_artifacts:
    driver: local
  
  # 로그 볼륨
  airflow_logs:
    driver: local
  api_logs:
    driver: local

networks:
  movie-mlops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
