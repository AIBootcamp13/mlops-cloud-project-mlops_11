# ==============================================================================
# Movie MLOps - ML Stack (Clean Version)
# 
# 포함 서비스:
# - ML 도구: MLflow (실험 추적), Feast (피처 스토어), PyTorch (모델)
# - API: FastAPI (추천 서비스)
# - 워크플로우: Airflow (데이터 파이프라인)
# - 개발: Jupyter Lab
#
# 인프라 서비스(PostgreSQL, Redis)는 별도 스택에서 관리
# 실행: docker compose -f docker/stacks/docker-compose.ml-stack.yml up -d
# ==============================================================================

services:
  # =============================================================================
  # 기본 인프라 서비스
  # =============================================================================
  
  # Redis - 인메모리 데이터베이스 (캠시, 대기열 등)
  redis:
    image: ${REDIS_IMAGE:-redis:7-alpine}
    container_name: movie-mlops-redis
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory ${REDIS_MEMORY_LIMIT:-512m}
      --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ${LOGS_VOLUME_PATH:-./logs}/redis:/var/log/redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    networks:
      - movie-mlops-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMIT:-512m}

  # =============================================================================
  # ML 핵심 도구들
  # =============================================================================
  
  # MLflow - 실험 추적 및 모델 레지스트리
  mlflow:
    build:
      context: ${HOST_PROJECT_PATH:-.}
      dockerfile: docker/dockerfiles/Dockerfile.mlflow
      args:
        - MLFLOW_VERSION=${MLFLOW_VERSION:-2.17.2}
    container_name: movie-mlops-mlflow
    ports:
      - "${MLFLOW_PORT:-5000}:${MLFLOW_PORT:-5000}"
    environment:
      MLFLOW_BACKEND_STORE_URI: ${MLFLOW_BACKEND_STORE_URI:-postgresql://postgres:postgres123@movie-mlops-postgres:5432/mlflow}
      MLFLOW_DEFAULT_ARTIFACT_ROOT: ${MLFLOW_DEFAULT_ARTIFACT_ROOT:-file:///app/mlartifacts}
      MLFLOW_SERVE_ARTIFACTS: ${MLFLOW_SERVE_ARTIFACTS:-true}
      PYTHONPATH: /app:/app/src
    volumes:
      - ${HOST_PROJECT_PATH:-.}:/app
      - ${MLFLOW_ARTIFACTS_PATH:-./data/mlflow/artifacts}:/app/mlartifacts
      - ${LOGS_VOLUME_PATH:-./logs}/mlflow:/app/logs
    networks:
      - movie-mlops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MLFLOW_PORT:-5000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Feast - 피처 스토어
  feast:
    build:
      context: ${HOST_PROJECT_PATH:-.}
      dockerfile: docker/dockerfiles/Dockerfile.feast
      args:
        - FEAST_VERSION=${FEAST_VERSION:-0.40.1}
    container_name: movie-mlops-feast
    ports:
      - "${FEAST_PORT:-6567}:${FEAST_PORT:-6567}"
    environment:
      FEAST_REPO_PATH: ${FEAST_REPO_PATH:-/app/feast_repo}
      FEAST_REGISTRY_PATH: ${FEAST_REGISTRY_PATH:-/app/feast_repo/data/registry.db}
      FEAST_PORT: ${FEAST_PORT:-6567}
      PYTHONPATH: /app:/app/src
    volumes:
      - ${HOST_PROJECT_PATH:-.}:/app
      - ${FEAST_DATA_PATH:-./data/feast}:/app/data/feast
    networks:
      - movie-mlops-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${FEAST_PORT:-6567}/health", "||", "curl", "-f", "http://localhost:${FEAST_PORT:-6567}/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    working_dir: /app/feast_repo

  # PyTorch - 딥러닝 모델 훈련 서비스
  pytorch-trainer:
    build:
      context: ${HOST_PROJECT_PATH:-.}
      dockerfile: docker/dockerfiles/Dockerfile.pytorch
      args:
        - PYTORCH_VERSION=${PYTORCH_VERSION:-2.5.1}
    container_name: movie-mlops-pytorch
    environment:
      PYTHONPATH: /app:/app/src
      MLFLOW_TRACKING_URI: http://movie-mlops-mlflow:${MLFLOW_PORT:-5000}
      PYTORCH_DEVICE: ${PYTORCH_DEVICE:-cpu}
      TORCH_HOME: ${TORCH_HOME:-/app/.torch}
      CUDA_VISIBLE_DEVICES: ${CUDA_VISIBLE_DEVICES:-}
    volumes:
      - ${HOST_PROJECT_PATH:-.}:/app
      - ${MODELS_PATH:-./models}:/app/models
      - ${LOGS_VOLUME_PATH:-./logs}/pytorch:/app/logs
    depends_on:
      - mlflow
      - feast
    networks:
      - movie-mlops-network
    # GPU 지원 (사용 가능한 경우)
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    profiles:
      - training
    restart: unless-stopped

  # =============================================================================
  # API 및 웹 서비스
  # =============================================================================
  
  # FastAPI - Movie MLOps 메인 추천 API (6번 메뉴용, port 8000)
  # 주의: Feast는 별도로 port 6567에서 FastAPI feature server를 실행함
  api:
    build:
      context: ${HOST_PROJECT_PATH:-.}
      dockerfile: docker/dockerfiles/Dockerfile.api
    container_name: movie-mlops-api
    ports:
      - "${API_PORT:-8000}:${API_PORT:-8000}"
    environment:
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      SECRET_KEY: ${SECRET_KEY:-changeme}
      PYTHONPATH: /app:/app/src
      MLFLOW_TRACKING_URI: http://movie-mlops-mlflow:${MLFLOW_PORT:-5000}
      FEAST_REPO_PATH: /app/feast_repo
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@movie-mlops-postgres:5432/${POSTGRES_DB:-movie_mlops}
    volumes:
      - ${HOST_PROJECT_PATH:-.}:/app
    depends_on:
      - mlflow
      - feast
    networks:
      - movie-mlops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_PORT:-8000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - api  # API 전용 프로파일 - 7번 메뉴(ML 전용)에서는 실행되지 않음

  # =============================================================================
  # 워크플로우 및 스케줄링
  # =============================================================================
  
  # Airflow Webserver - 데이터 파이프라인 관리
  airflow-webserver:
    build:
      context: ${HOST_PROJECT_PATH:-.}
      dockerfile: docker/dockerfiles/Dockerfile.airflow
      args:
        - AIRFLOW_VERSION=${AIRFLOW_VERSION:-2.9.3}
    container_name: movie-mlops-airflow-webserver
    ports:
      - "${AIRFLOW_WEBSERVER_PORT:-8080}:${AIRFLOW_WEBSERVER_PORT:-8080}"
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR:-LocalExecutor}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN:-postgresql+psycopg2://airflow:airflow@movie-mlops-postgres:5432/airflow}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES:-False}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: ${AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION:-True}
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: ${AIRFLOW__WEBSERVER__EXPOSE_CONFIG:-True}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY:-changeme}
      MLFLOW_TRACKING_URI: http://movie-mlops-mlflow:${MLFLOW_PORT:-5000}
      PYTHONPATH: /app:/app/src
    volumes:
      - ${HOST_PROJECT_PATH:-.}:/app
      - ${AIRFLOW_DAGS_PATH:-./airflow/dags}:/opt/airflow/dags
      - ${AIRFLOW_LOGS_PATH:-./logs/airflow}:/opt/airflow/logs
    depends_on:
      - mlflow
    networks:
      - movie-mlops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${AIRFLOW_WEBSERVER_PORT:-8080}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@movie-mlops.com --password admin &&
        airflow webserver --port ${AIRFLOW_WEBSERVER_PORT:-8080}
      "

  # Airflow Scheduler - DAG 스케줄러
  airflow-scheduler:
    build:
      context: ${HOST_PROJECT_PATH:-.}
      dockerfile: docker/dockerfiles/Dockerfile.airflow
      args:
        - AIRFLOW_VERSION=${AIRFLOW_VERSION:-2.9.3}
    container_name: movie-mlops-airflow-scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR:-LocalExecutor}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN:-postgresql+psycopg2://airflow:airflow@movie-mlops-postgres:5432/airflow}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES:-False}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: ${AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION:-True}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY:-changeme}
      MLFLOW_TRACKING_URI: http://movie-mlops-mlflow:${MLFLOW_PORT:-5000}
      PYTHONPATH: /app:/app/src
    volumes:
      - ${HOST_PROJECT_PATH:-.}:/app
      - ${AIRFLOW_DAGS_PATH:-./airflow/dags}:/opt/airflow/dags
      - ${AIRFLOW_LOGS_PATH:-./logs/airflow}:/opt/airflow/logs
    depends_on:
      - mlflow
    networks:
      - movie-mlops-network
    restart: unless-stopped
    command: ["airflow", "scheduler"]

  # =============================================================================
  # 개발 도구
  # =============================================================================
  
  # Jupyter Lab - ML 개발 및 실험 환경 (ML 전용 스택에 포함, FastAPI와 독립적)
  jupyter:
    build:
      context: ${HOST_PROJECT_PATH:-.}
      dockerfile: docker/dockerfiles/Dockerfile.jupyter
    container_name: movie-mlops-jupyter
    ports:
      - "${JUPYTER_PORT:-8888}:${JUPYTER_PORT:-8888}"
    environment:
      JUPYTER_ENABLE_LAB: yes
      JUPYTER_TOKEN: ${JUPYTER_TOKEN:-movie-mlops-jupyter}
      PYTHONPATH: /app:/app/src
      MLFLOW_TRACKING_URI: http://movie-mlops-mlflow:${MLFLOW_PORT:-5000}
      FEAST_REPO_PATH: /app/feast_repo
    volumes:
      - ${HOST_PROJECT_PATH:-.}:/app
      - ${JUPYTER_NOTEBOOKS_PATH:-./notebooks}:/app/notebooks
    # depends_on 완전 제거 - ML 전용 스택에서 독립적으로 실행
    networks:
      - movie-mlops-network
    profiles:
      - development
    restart: unless-stopped
    command: >
      bash -c "
        jupyter lab --ip=0.0.0.0 --port=${JUPYTER_PORT:-8888} --no-browser --allow-root --token=${JUPYTER_TOKEN:-movie-mlops-jupyter}
      "

# =============================================================================
# 볼륨 정의
# =============================================================================

volumes:
  redis_data:
    driver: local

# =============================================================================
# 네트워크 (외부 네트워크 사용)
# =============================================================================

networks:
  movie-mlops-network:
    external: true
