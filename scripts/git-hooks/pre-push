#!/bin/bash
# Pre-push Git Hook
# 푸시 전에 브랜치명과 커밋 메시지 검증

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${YELLOW}🔍 Pre-push 검증 시작...${NC}"

# 현재 브랜치명 가져오기
CURRENT_BRANCH=$(git branch --show-current)

echo "현재 브랜치: $CURRENT_BRANCH"

# 1. 브랜치명 검증
SCRIPT_DIR="$(dirname "$0")/../../scripts"
VALIDATION_SCRIPT="$SCRIPT_DIR/validate-branch-name.sh"

if [ -f "$VALIDATION_SCRIPT" ]; then
    echo "📋 브랜치명 검증 중..."
    if ! bash "$VALIDATION_SCRIPT" "$CURRENT_BRANCH"; then
        echo -e "${RED}❌ 브랜치명 검증 실패. 푸시를 중단합니다.${NC}"
        echo "올바른 브랜치명으로 변경하거나 새 브랜치를 생성해주세요."
        exit 1
    fi
else
    echo -e "${YELLOW}⚠️ 브랜치명 검증 스크립트를 찾을 수 없습니다.${NC}"
fi

# 2. 보호된 브랜치 직접 푸시 방지
PROTECTED_BRANCHES=("main" "develop" "staging" "production")

for protected in "${PROTECTED_BRANCHES[@]}"; do
    if [ "$CURRENT_BRANCH" = "$protected" ]; then
        echo -e "${RED}❌ 보호된 브랜치 '$protected'에 직접 푸시할 수 없습니다.${NC}"
        echo "Pull Request를 통해 변경사항을 반영해주세요."
        exit 1
    fi
done

# 3. 최근 커밋 메시지 검증 (선택사항)
RECENT_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
echo "최근 커밋 메시지: $RECENT_COMMIT_MSG"

# 커밋 메시지 패턴 검증 (Conventional Commits 스타일)
COMMIT_PATTERN="^(feat|fix|docs|style|refactor|test|chore|data|model|pipeline|infra)(\(.+\))?: .{1,50}"

if [[ ! $RECENT_COMMIT_MSG =~ $COMMIT_PATTERN ]]; then
    echo -e "${YELLOW}⚠️ 커밋 메시지가 권장 형식과 다릅니다.${NC}"
    echo "권장 형식: <타입>(<스코프>): <설명>"
    echo "예시: feat(api): add TMDB movie data collection"
    echo "계속 진행하시겠습니까? (y/N)"
    read -r response
    if [[ ! $response =~ ^[Yy]$ ]]; then
        echo "푸시를 취소합니다."
        exit 1
    fi
fi

# 4. 원격 브랜치와 동기화 확인
echo "📡 원격 저장소와 동기화 상태 확인 중..."

# 원격 저장소 정보 업데이트
git fetch origin >/dev/null 2>&1

# 원격 브랜치가 존재하는지 확인
if git show-ref --verify --quiet "refs/remotes/origin/$CURRENT_BRANCH"; then
    # 로컬과 원격 브랜치 차이 확인
    LOCAL_COMMIT=$(git rev-parse HEAD)
    REMOTE_COMMIT=$(git rev-parse "origin/$CURRENT_BRANCH")
    
    if [ "$LOCAL_COMMIT" != "$REMOTE_COMMIT" ]; then
        AHEAD=$(git rev-list --count "origin/$CURRENT_BRANCH..HEAD")
        BEHIND=$(git rev-list --count "HEAD..origin/$CURRENT_BRANCH")
        
        if [ "$BEHIND" -gt 0 ]; then
            echo -e "${YELLOW}⚠️ 원격 브랜치보다 $BEHIND 개의 커밋이 뒤처져 있습니다.${NC}"
            echo "git pull을 먼저 실행하는 것을 권장합니다."
            echo "계속 진행하시겠습니까? (y/N)"
            read -r response
            if [[ ! $response =~ ^[Yy]$ ]]; then
                echo "푸시를 취소합니다."
                exit 1
            fi
        fi
        
        if [ "$AHEAD" -gt 0 ]; then
            echo -e "${GREEN}📤 $AHEAD 개의 새 커밋을 푸시합니다.${NC}"
        fi
    fi
fi

echo -e "${GREEN}✅ Pre-push 검증 완료. 푸시를 진행합니다.${NC}"
exit 0
